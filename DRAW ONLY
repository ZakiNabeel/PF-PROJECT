#include <iostream>
#include<cstdlib>
#include<ctime>
#include <SFML/Graphics.hpp>
#include <SFML/Audio.hpp>

using namespace std;
using namespace sf;
// Initializing Dimensions.
// resolutionX and resolutionY determine the rendering resolution.
// Don't edit unless required. Use functions on lines 43, 44, 45 for resizing the game window.
const int resolutionX = 960;
const int resolutionY = 960;
const int boxPixelsX = 32;
const int boxPixelsY = 32;
const int gameRows = resolutionX / boxPixelsX; // Total rows on grid
const int gameColumns = resolutionY / boxPixelsY; // Total columns on grid

// Initializing GameGrid.
int gameGrid[gameRows][gameColumns] = {};

// The following exist purely for readability.
const int x = 0;
const int y = 1;
const int exists = 2;
int ShootChecker=0;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                         //
// Write your functions declarations here. Some have been written for you. //
void movePlayer(float player[], sf::Event Event);
void drawMushroom(sf::RenderWindow& window, float Mushroom[][3],sf::Sprite& MushroomSprite, int& MushroomChecker);  
void ShootCheck(float Mushroom[][3], float bullet[]);  
void drawCentipede(sf::RenderWindow& window, float Centipede[][3], sf::Sprite& CentipedeSprite, sf::Sprite& CentipedeHeadSprite);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void drawPlayer(sf::RenderWindow& window, float player[], sf::Sprite& playerSprite);
void moveBullet(float bullet[], sf::Clock& bulletClock,float player[]);
void drawBullet(sf::RenderWindow& window, float bullet[], sf::Sprite& bulletSprite);
int main()
{
	srand(time(0));
	// Declaring RenderWindow.
	sf::RenderWindow window(sf::VideoMode(resolutionX, resolutionY), "Centipede", sf::Style::Close | sf::Style::Titlebar);

	// Used to resize your window if it's too big or too small. Use according to your needs.
	window.setSize(sf::Vector2u(640, 640)); // Recommended for 1366x768 (768p) displays.
	// window.setSize(sf::Vector2u(1280, 1280)); // Recommended for 2560x1440 (1440p) displays.
	// window.setSize(sf::Vector2u(1920, 1920)); // Recommended for 3840x2160 (4k) displays.
	
	// Used to position your window on every launch. Use according to your needs.
	window.setPosition(sf::Vector2i(100, 0));
	window.setFramerateLimit(120);

	// Initializing Background Music.
	sf::Music bgMusic;
	bgMusic.openFromFile("Music/field_of_hopes.ogg");
	bgMusic.play();
	bgMusic.setVolume(50);

	// Initializing Background.
	sf::Texture backgroundTexture;
	sf::Sprite backgroundSprite;
	backgroundTexture.loadFromFile("Textures/background.png");
	backgroundSprite.setTexture(backgroundTexture);
	backgroundSprite.setColor(sf::Color(255, 255, 255, 255* 0.20)); // Reduces Opacity to 25%

	// Initializing Player and Player Sprites.
	float player[2] = {};
	player[x] = (gameColumns / 2) * boxPixelsX;
	player[y] = (gameColumns * 3 / 4) * boxPixelsY;
	sf::Texture playerTexture;
	sf::Sprite playerSprite;
	playerTexture.loadFromFile("Textures/player.png");
	playerSprite.setTexture(playerTexture);
	playerSprite.setTextureRect(sf::IntRect(0, 0, boxPixelsX, boxPixelsY));

	// Initializing Mushrooooooooooom Sprites
	float Mushroom[25][3]={};
	sf::Texture MushroomTexture;
	sf::Sprite MushroomSprite;
	MushroomTexture.loadFromFile("Textures/mushroom.png");
	MushroomSprite.setTexture(MushroomTexture);
	MushroomSprite.setTextureRect(sf::IntRect(0, 0, boxPixelsX, boxPixelsY));
	int MushroomChecker=0;

	//Initiallizing the Centipede!!!!!
	float Centipede[12][3]={};
	
	sf::Texture CentipedeTexture;
	sf::Sprite CentipedeSprite;
	CentipedeTexture.loadFromFile("Textures/c_body_left_walk.png");
	CentipedeSprite.setTexture(CentipedeTexture);
	CentipedeSprite.setTextureRect(sf::IntRect(0, 0, boxPixelsX, boxPixelsY));
	
	sf::Texture CentipedeHeadTexture;
	sf::Sprite CentipedeHeadSprite;
	CentipedeHeadTexture.loadFromFile("Textures/c_head_left_walk.png");
	CentipedeHeadSprite.setTexture(CentipedeHeadTexture);
	CentipedeHeadSprite.setTextureRect(sf::IntRect(0, 0, boxPixelsX, boxPixelsY));


	// Initializing Bullet and Bullet Sprites.
	float bullet[3] = {};
	bullet[x] = player[x];
	bullet[y] = player[y] - boxPixelsY;
	bullet[exists] = true;
	sf::Clock bulletClock;
	sf::Texture bulletTexture;
	sf::Sprite bulletSprite;
	bulletTexture.loadFromFile("Textures/bullet.png");
	bulletSprite.setTexture(bulletTexture);
	bulletSprite.setTextureRect(sf::IntRect(0, 0, boxPixelsX, boxPixelsY));

	while(window.isOpen()) {
	
		///////////////////////////////////////////////////////////////
		//                                                           //
		// Call Your Functions Here. Some have been written for you. //
		// Be vary of the order you call them, SFML draws in order.  //
		//                                                           //
		///////////////////////////////////////////////////////////////

		window.draw(backgroundSprite);
		drawPlayer(window, player, playerSprite);
		drawMushroom(window, Mushroom, MushroomSprite, MushroomChecker); //CALLING FUNCTION TO CREATE MUSHROOMS
		drawCentipede(window,Centipede,CentipedeSprite,CentipedeHeadSprite); //CALLING FUNCTION TO GET BULLETS
		MushroomChecker++;
		if (bullet[exists] == true) {
			sf::Event BulletEvent;
				moveBullet(bullet, bulletClock, player);
				drawBullet(window, bullet, bulletSprite);
				//ShootCheck(Mushroom,bullet);
		}

		sf::Event Event;
		while (window.pollEvent(Event)) {
			
				switch(Event.type){
				case sf::Event::Closed:
				return 0;
				break;
				case::Event::KeyPressed:
				//movePlayer(player);			//Calling Function to Move Player
				movePlayer(player, Event);
				//moveBullet(bullet,bulletClock,player, Event);
			}

		}		
		window.display();
		window.clear();
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                        //
// Write your functions definitions here. Some have been written for you. //

//moving PLAYER function
void movePlayer(float player[], sf::Event Event){
				//movePlayer(player);
				if(Event.key.code== sf::Keyboard::Left && player[x]>0) player[x] -=16;
				else if(Event.key.code== sf::Keyboard::Right && player[x]<928) player[x] +=16;
				else if(Event.key.code== sf::Keyboard::Up && player[y]>720) player[y] -=16;
				else if(Event.key.code== sf::Keyboard::Down && player[y]<880)   player[y] +=16;
			}

//drawing MUSHROOMS function
void drawMushroom(sf::RenderWindow& window, float Mushroom[][3], sf::Sprite& MushroomSprite, int& MushroomChecker)
			{
				for (int i = 0; i < 25; i++)
				{
					if (MushroomChecker == 0)
					{
						Mushroom[i][0] = ((rand() % 21)+1) * boxPixelsX;
						Mushroom[i][1] = (rand() % 29) * boxPixelsY;
						Mushroom[i][2] = 2;
					}
					 	if(Mushroom[i][2]>0){
					 	MushroomSprite.setPosition(Mushroom[i][1], Mushroom[i][0]);
						window.draw(MushroomSprite);
						}
				}
			}

//SHOOT CHECKER function
void ShootCheck(float Mushroom[][3], float bullet[])
			{
				for (int i = 0; i < 25; i++)
				{
					// Check if the bullet and mushroom intersect
					if (bullet[x] < Mushroom[i][0] + boxPixelsX &&
						bullet[x] + boxPixelsX > Mushroom[i][0] &&
						bullet[y] < Mushroom[i][1] + boxPixelsY &&
						bullet[y] + boxPixelsY > Mushroom[i][1])
					{
						// Bullet hit the mushroom, increment the hit count
						Mushroom[i][2]--;

						// Check if the mushroom has been hit twice
						/*if (Mushroom[i][2] >= 2)
						{
							// Mushroom is completely destroyed permanently
							Mushroom[i][2] = -1;
						}*/

						// Reset the bullet position
						bullet[x] = -32;
						bullet[y] = -32;
					}
				}
			}

//drawing CENTIPEDE function
void drawCentipede(sf::RenderWindow& window, float Centipede[][3], sf::Sprite& CentipedeSprite, sf::Sprite& CentipedeHeadSprite) 
			{
				for(int i=0; i<=11; i++)
					{
						Centipede[i][0]=i*boxPixelsX+32*4; 
						Centipede[i][1]=0*boxPixelsY;
						CentipedeSprite.setPosition(Centipede[i][0], Centipede[i][1]);
						window.draw(CentipedeSprite);
						if(i==0)
						{
						Centipede[i][0]=i*boxPixelsX+32*4;
						Centipede[i][1]=0*boxPixelsY;
						CentipedeHeadSprite.setPosition(Centipede[i][0], Centipede[i][1]);
						window.draw(CentipedeHeadSprite);
						}
					}
			}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//DRAWING PLAYER FUNCTION
void drawPlayer(sf::RenderWindow& window, float player[], sf::Sprite& playerSprite) {
	playerSprite.setPosition(player[x], player[y]);
	window.draw(playerSprite);
}

//MOVING BULLET FUNCTION
void moveBullet(float bullet[], sf::Clock& bulletClock,float player[]){
	if (bulletClock.getElapsedTime().asMilliseconds() < 20)
		return;

	bulletClock.restart();
	bullet[y] -= 16;	
	if (bullet[y] < -32)
		{
		bullet[x] = player[x];
		bullet[y] = player[y] - boxPixelsY;
		}
}

//DRAWING BULLET FUNCTION
void drawBullet(sf::RenderWindow& window, float bullet[], sf::Sprite& bulletSprite){
	bulletSprite.setPosition(bullet[x], bullet[y]);
	window.draw(bulletSprite);
}
