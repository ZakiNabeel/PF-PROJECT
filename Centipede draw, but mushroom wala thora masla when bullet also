#include <iostream>
#include<cstdlib>
#include<ctime>
#include <SFML/Graphics.hpp>
#include <SFML/Audio.hpp>

using namespace std;
using namespace sf;
// Initializing Dimensions.
// resolutionX and resolutionY determine the rendering resolution.
// Don't edit unless required. Use functions on lines 43, 44, 45 for resizing the game window.
const int resolutionX = 960;
const int resolutionY = 960;
const int boxPixelsX = 32;
const int boxPixelsY = 32;
const int gameRows = resolutionX / boxPixelsX; // Total rows on grid
const int gameColumns = resolutionY / boxPixelsY; // Total columns on grid

// Initializing GameGrid.
int gameGrid[gameRows][gameColumns] = {};

// The following exist purely for readability.
const int x = 0;
const int y = 1;
const int exists = 2; 
int ShootChecker=0;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                         //
// Write your functions declarations here. Some have been written for you. //
void movePlayer(float player[][2], float bullet[][3], sf::Event Event, bool &BulletShoot);
void drawMushroom(sf::RenderWindow& window, float Mushroom[][3],sf::Sprite& MushroomSprite, int& MushroomChecker);  
void ShootCheck(float Mushroom[][3], float bullet[][3], float player[][2], bool &BulletShoot);  

void MoveCentipedeOneRow(sf::RenderWindow& window, float Centipede[][5], sf::Sprite& CentipedeSprite, sf::Sprite& CentipedeHeadSprite
,bool& CentipedeDirection, float Mushroom[][3], bool& CentipedeMushroomEdge0, bool& CentipedeMushroomEdge1, bool& CentipedeHitBottom
, 	int& CentipedeHitBottomCount);

void drawCentipede(sf::RenderWindow& window, float Centipede[][5], sf::Sprite& CentipedeSprite, sf::Sprite& CentipedeHeadSprite, int& i);
void drawCentipedeHead(sf::RenderWindow& window, float Centipede[][5], sf::Sprite& CentipedeHeadSprite, int& i);
void CheckCentipedeCollision(float Centipede[][5], bool& CentipedeDirection, int& i, bool& CentipedeHitBottom, int& CentipedeHitBottomCount);
void MushroomCentipede(float Mushroom[][3], float Centipede[][5], bool& CentipedeMushroomEdge0, bool& CentipedeMushroomEdge1, int&i);  



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void drawPlayer(sf::RenderWindow& window, float player[][2], sf::Sprite& playerSprite);
void moveBullet(float bullet[][3], sf::Clock& bulletClock,float player[][2], bool &BulletShoot);
void drawBullet(sf::RenderWindow& window, float bullet[][3], sf::Sprite& bulletSprite);
int main()
{
	int CentipedeHitBottomCount = 0;
	bool CentipedeMushroomEdge1 = false;
    bool CentipedeMushroomEdge0 = false;
    bool CentipedeHitBottom = false;
	bool BulletShoot=false;
	bool CentipedeDirection=false;
    srand(time(0));
	//////////////////////////////////////////////////////

	
	
	// Declaring RenderWindow.
	sf::RenderWindow window(sf::VideoMode(resolutionX, resolutionY), "Best Game in The World", sf::Style::Close | sf::Style::Titlebar);
	bool bulletFire = false;
	sf::Clock bulletFireClock;
	// Used to resize your window if it's too big or too small. Use according to your needs.
	window.setSize(sf::Vector2u(640, 640)); // Recommended for 1366x768 (768p) displays.
	// window.setSize(sf::Vector2u(1280, 1280)); // Recommended for 2560x1440 (1440p) displays.
	// window.setSize(sf::Vector2u(1920, 1920)); // Recommended for 3840x2160 (4k) displays.
	
	// Used to position your window on every launch. Use according to your needs.
	window.setPosition(sf::Vector2i(100, 0));
	window.setFramerateLimit(120);
	
	// Initializing Background Music.
	sf::Music bgMusic;
	bgMusic.openFromFile("Music/field_of_hopes.ogg");
	bgMusic.play();
	bgMusic.setVolume(50);
	
	// Initializing sound effect
	sf::SoundBuffer shootingSoundBuffer;
	if (!shootingSoundBuffer.loadFromFile("SoundEffects/fire1.wav")) 
	{
		//cout<<"Error loading shooting sound"<<endl;
		return -1;
	}
	sf::Sound shootingSound;
	shootingSound.setBuffer(shootingSoundBuffer);

	// Initializing Background.
	sf::Texture backgroundTexture;
	sf::Sprite backgroundSprite;
	backgroundTexture.loadFromFile("Textures/background.png");
	backgroundSprite.setTexture(backgroundTexture);
	backgroundSprite.setColor(sf::Color(255, 255, 255, 255 * 0.20)); // Reduces Opacity to 25%

	// Initializing Player and Player Sprites.
	float player[1][2] = {};
	player[0][0] = (gameColumns / 2) * boxPixelsX;
	player[0][1] = (gameColumns * 3 / 4) * boxPixelsY;
	//cout<<player[0][0]<<" "<<player[0][1]<<"Player boi"<<endl;
	sf::Texture playerTexture;
	sf::Sprite playerSprite;
	playerTexture.loadFromFile("Textures/player.png");
	playerSprite.setTexture(playerTexture);
	playerSprite.setTextureRect(sf::IntRect(0, 0, boxPixelsX, boxPixelsY));

	// Initializing Mushroom Sprites
	float Mushroom[50][3]={};
	sf::Texture MushroomTexture;
	sf::Sprite MushroomSprite;
	MushroomTexture.loadFromFile("Textures/mushroom.png");
	MushroomSprite.setTexture(MushroomTexture);
	MushroomSprite.setTextureRect(sf::IntRect(0, 0, boxPixelsX, boxPixelsY));
	int MushroomChecker=0;

	//Initiallizing the Centipede!!!!!
	float Centipede[12][5]={};
	sf::Texture CentipedeTexture;
	sf::Sprite CentipedeSprite;
	CentipedeTexture.loadFromFile("Textures/c_body_left_walk.png");
	CentipedeSprite.setTexture(CentipedeTexture);
	CentipedeSprite.setTextureRect(sf::IntRect(0, 0, boxPixelsX, boxPixelsY));
	
	sf::Texture CentipedeHeadTexture;
	sf::Sprite CentipedeHeadSprite;
	CentipedeHeadTexture.loadFromFile("Textures/c_head_left_walk.png");
	CentipedeHeadSprite.setTexture(CentipedeHeadTexture);
	CentipedeHeadSprite.setTextureRect(sf::IntRect(0, 0, boxPixelsX, boxPixelsY));

	int RandomLocation = (rand()%29)+1;
	for(int i=0, j=0, k=384; i<12; k+=32, i++)
		{
			Centipede[i][3]=0;
            Centipede[i][0]=k;
			Centipede[i][1]=j;
			Centipede[i][4]=0;
			if(i>0)
			Centipede[i][2]=0;
			else
			Centipede[i][2]=1;
		}

	// Initializing Bullet and Bullet Sprites.
	float bullet[1][3] = {};
	bullet[0][0] = player[0][0];
	bullet[0][1] = player[0][1] - boxPixelsY;
	bullet[0][exists] = true;
	sf::Clock bulletClock;
	sf::Texture bulletTexture;
	sf::Sprite bulletSprite;
	bulletTexture.loadFromFile("Textures/bullet.png");
	bulletSprite.setTexture(bulletTexture);
	bulletSprite.setTextureRect(sf::IntRect(0, 0, boxPixelsX, boxPixelsY));

	while(window.isOpen()) {
		window.draw(backgroundSprite);
		drawMushroom(window, Mushroom, MushroomSprite, MushroomChecker); //CALLING FUNCTION TO CREATE MUSHROOMS
		drawPlayer(window, player, playerSprite);
		MoveCentipedeOneRow(window, Centipede, CentipedeSprite, CentipedeHeadSprite, CentipedeDirection,Mushroom,CentipedeMushroomEdge0,
        CentipedeMushroomEdge1, CentipedeHitBottom, CentipedeHitBottomCount); //Function that moves and even DRAWS the Centipede
        //MushroomCentipede(Mushroom, Centipede);

        MushroomChecker++;
		
		if (BulletShoot)
		{
				drawBullet(window, bullet, bulletSprite);
				moveBullet(bullet, bulletClock, player,BulletShoot);

				//drawBullet(window, bullet, bulletSprite);
		}
        sf::Event Event;
        while (window.pollEvent(Event)) {
            switch (Event.type) {
                case sf::Event::Closed:
                    return 0;
                    break;

                case sf::Event::KeyPressed:
                    if (Event.key.code == sf::Keyboard::Space) {
                        BulletShoot = true;
									if (BulletShoot) {
						shootingSound.play();
					}
				    } 
					else {
                        movePlayer(player, bullet, Event, BulletShoot);
                    }
                    break;
            }
		}
	  	ShootCheck(Mushroom, bullet, player,BulletShoot); //CHECK IF BULLET HITS MUSHROOM

        window.display();
        window.clear();
    }

    return 0;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//moving PLAYER function
void movePlayer(float player[][2], float bullet[][3], sf::Event Event, bool& BulletShoot) {
				if (Event.key.code == sf::Keyboard::Space) {
					BulletShoot = true;
				}

				if (Event.key.code == sf::Keyboard::Left && player[0][0] > 0) {
					player[0][0] -= 32;
					if (!BulletShoot)
						bullet[0][0] -= 32;
				} else if (Event.key.code == sf::Keyboard::Right && player[0][0] < 29 * boxPixelsX) {
					player[0][0] += 32;
					if (!BulletShoot)
						bullet[0][0] += 32;
				}
				if (Event.key.code == sf::Keyboard::Up && player[0][1] > 22 * boxPixelsY) {
					player[0][1] -= 32;
					if (!BulletShoot)
						bullet[0][1] -= 32;
				} else if (Event.key.code == sf::Keyboard::Down && player[0][1] < 27 * boxPixelsY) {
					player[0][1] += 32;
					if (!BulletShoot)
						bullet[0][1] += 32;
				}
}

//drawing MUSHROOMS function
void drawMushroom(sf::RenderWindow& window, float Mushroom[][3], sf::Sprite& MushroomSprite, int& MushroomChecker)
			{
				for (int i = 0; i < 25; i++)
				{
					if (MushroomChecker == 0){
						Mushroom[i][0] = ((rand() % 26)+2) * boxPixelsX;
						Mushroom[i][1] = ((rand() % 27)+1) * boxPixelsY;
						Mushroom[i][2] = 2;
						//cout<<Mushroom[i][0]<<" "<<Mushroom[i][1]<<endl;

					}
					 	if(Mushroom[i][2]>0){
					 	MushroomSprite.setPosition(Mushroom[i][0], Mushroom[i][1]);
						window.draw(MushroomSprite);
						}
				}
			}

//SHOOT CHECKER function
void ShootCheck(float Mushroom[][3], float bullet[][3], float player[][2], bool &BulletShoot) {
    for (int i = 0; i < 25; i++) {
        // Check if the bullet and mushroom intersect
        if (bullet[0][0] <= Mushroom[i][0] + 10 &&
           bullet[0][0] + 10 >= Mushroom[i][0] + 10 &&
		   bullet[0][1] <= Mushroom[i][1] + 10 &&
           bullet[0][1] + 10 >= Mushroom[i][1] + 10 &&
		   BulletShoot == true) 
		   {
			BulletShoot=false;
			// Bullet hit the mushroom, decrement the hit count
            Mushroom[i][2]--;
			if(Mushroom[i][2]==0)
			{
			Mushroom[i][0]=-20;
			Mushroom[i][1]=-20;
			}
			// Reset the bullet position
            bullet[0][0] = player[0][0];
            bullet[0][1] = player[0][1] - boxPixelsY;
        	}
   		 }
}


//drawing CENTIPEDE function
void MoveCentipedeOneRow(sf::RenderWindow& window, float Centipede[][5], sf::Sprite& CentipedeSprite, sf::Sprite& CentipedeHeadSprite, 
bool& CentipedeDirection, float Mushroom[][3], bool& CentipedeMushroomEdge0, bool& CentipedeMushroomEdge1, bool& CentipedeHitBottom,
int& CentipedeHitBottomCount) 
		 	{
				for(int i=0; i<=11; i++)
					{
						if(Centipede[i][2]!=1 && Centipede[i][3]==0){
								Centipede[i][0]-=4; 
								CheckCentipedeCollision(Centipede, CentipedeDirection, i, CentipedeHitBottom, CentipedeHitBottomCount);
								MushroomCentipede(Mushroom, Centipede, CentipedeMushroomEdge0 ,CentipedeMushroomEdge1, i);						
								/*if(CentipedeMushroomEdge0==true && Centipede[i][0]<=32){
								CheckCentipedeCollision(Centipede, CentipedeDirection, i);						
								CentipedeMushroomEdge0=false;
								}*/
								drawCentipede(window,Centipede,CentipedeSprite,CentipedeHeadSprite, i); //CALLING FUNCTION TO GET BULLETS
						}
						
                        if(Centipede[i][2]==1 && Centipede[i][3]==0)
								{
								Centipede[i][0]-=4;
								CheckCentipedeCollision(Centipede, CentipedeDirection, i, CentipedeHitBottom, CentipedeHitBottomCount);
								MushroomCentipede(Mushroom, Centipede, CentipedeMushroomEdge0 ,CentipedeMushroomEdge1, i);
			        	        /*if(CentipedeMushroomEdge0==true && Centipede[i][0]<=32){
						        CheckCentipedeCollision(Centipede, CentipedeDirection, i);
								CentipedeMushroomEdge0=false;
								}*/
								drawCentipedeHead(window,Centipede,CentipedeHeadSprite, i); //CALLING FUNCTION TO GET BULLETS                       
						}
						
                        if(Centipede[i][2]!=1 && Centipede[i][3]==1){
								Centipede[i][0]+=4; 
								CheckCentipedeCollision(Centipede, CentipedeDirection, i, CentipedeHitBottom, CentipedeHitBottomCount);
								MushroomCentipede(Mushroom, Centipede, CentipedeMushroomEdge0 ,CentipedeMushroomEdge1, i);
								/*if(CentipedeMushroomEdge1==true && Centipede[i][0]>=896){
								CheckCentipedeCollision(Centipede, CentipedeDirection, i);						
								CentipedeMushroomEdge1=false;
								} */
								drawCentipede(window,Centipede,CentipedeSprite,CentipedeHeadSprite, i); //CALLING FUNCTION TO GET BULLETS
						}
						
                        if(Centipede[i][2]==1 && Centipede[i][3]==1)
								{
								Centipede[i][0]+=4;
								CheckCentipedeCollision(Centipede, CentipedeDirection, i, CentipedeHitBottom, CentipedeHitBottomCount);
								MushroomCentipede(Mushroom, Centipede, CentipedeMushroomEdge0 ,CentipedeMushroomEdge1, i);
						    	/*if(CentipedeMushroomEdge1==true && Centipede[i][0]>=896){
								CheckCentipedeCollision(Centipede, CentipedeDirection, i);
								CentipedeMushroomEdge1=false;
								}*/
								drawCentipedeHead(window,Centipede,CentipedeHeadSprite, i); //CALLING FUNCTION TO GET BULLETS 
						}
                    }
	}

void drawCentipede(sf::RenderWindow& window, float Centipede[][5], sf::Sprite& CentipedeSprite, sf::Sprite& CentipedeHeadSprite, int& i) {
                    CentipedeSprite.setPosition(Centipede[i][0], Centipede[i][1]);
                    window.draw(CentipedeSprite);
                }

void drawCentipedeHead(sf::RenderWindow& window, float Centipede[][5], sf::Sprite& CentipedeHeadSprite, int& i) {
                    CentipedeHeadSprite.setPosition(Centipede[i][0], Centipede[i][1]);
                    window.draw(CentipedeHeadSprite);
                }

void CheckCentipedeCollision(float Centipede[][5], bool& CentipedeDirection, int& i, bool& CentipedeHitBottom, int& CentipedeHitBottomCount){
                // Check if any segment of the centipede has reached the leftmost or rightmost part of screen
				    if(Centipede[i][1]==864 && Centipede[i][4]== 0) Centipede[i][4] = 1;
					if(Centipede[i][1]==704 && Centipede[i][4]== 1) Centipede[i][4] = 0;

					if (Centipede[i][0] == 0 && Centipede[i][1]<=864 && Centipede[i][4]== 0) {
							Centipede[i][1] += boxPixelsY;
							Centipede[i][3]=1;
						}
                    if (Centipede[i][0] == 928 && Centipede[i][1]<=864 && Centipede[i][4]== 0) {
							Centipede[i][1] += boxPixelsY;
							Centipede[i][3]=0;
						}
					if (Centipede[i][0] == 0 && Centipede[i][1]<=864 && Centipede[i][4]== 1) {
							Centipede[i][1] -= boxPixelsY;
							Centipede[i][3]=1;
						    CentipedeHitBottomCount++;
						}
                    if (Centipede[i][0] == 928 && Centipede[i][1]<=864 && Centipede[i][4]== 1) {
							Centipede[i][1] -= boxPixelsY;
							Centipede[i][3]=0;
							CentipedeHitBottomCount++;					
						}	
				if (Centipede[i][1]>864 &&	Centipede[i][3]==1){
						Centipede[i][1] -= boxPixelsY*2;
						Centipede[i][3]=0;
						}
					if (Centipede[i][1]>864 &&	Centipede[i][3]==0){
						Centipede[i][1] -= boxPixelsY*2;
						Centipede[i][3]=1;
						}
	}
            

void MushroomCentipede(float Mushroom[][3], float Centipede[][5], bool& CentipedeMushroomEdge0, bool& CentipedeMushroomEdge1, int& i){

                for(int j=0; j<50; j++)
                    {
                        if((Centipede[i][0]==Mushroom[j][0]-boxPixelsX ||
                        Centipede[i][0]==Mushroom[j][0]+boxPixelsX)  
                        && Centipede[i][1]==Mushroom[j][1])
                        {
                            if(Centipede[i][3]==0 && Centipede[i][4]==0){
								Centipede[i][1] += boxPixelsY;
								Centipede[i][3]=1;
									if(Mushroom[j][0]==32)
									CentipedeMushroomEdge0=true;
								break;
                            }
                            if(Centipede[i][3]==1 && Centipede[i][4]==0){
								Centipede[i][1] += boxPixelsY;
								Centipede[i][3]=0;
									if(Mushroom[j][0]==896)
									CentipedeMushroomEdge1=true;

								break;
                            }
                            if(Centipede[i][3]==1 && Centipede[i][4]==1){
								Centipede[i][1] -= boxPixelsY;
								Centipede[i][3]=0;
									if(Mushroom[j][0]==896)
									CentipedeMushroomEdge1=true;

								break;
                            }
                            if(Centipede[i][3]==0 && Centipede[i][4]==1){
								Centipede[i][1] -= boxPixelsY;
								Centipede[i][3]=1;
									if(Mushroom[j][0]==896)
									CentipedeMushroomEdge1=true;

								break;
                            }
                        }
                    }           
 }
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//DRAWING PLAYER FUNCTION
void drawPlayer(sf::RenderWindow& window, float player[][2], sf::Sprite& playerSprite) {
	playerSprite.setPosition(player[0][0], player[0][1]);
	window.draw(playerSprite);
}

//MOVING BULLET FUNCTION
void moveBullet(float bullet[][3], sf::Clock& bulletClock,float player[][2], bool &BulletShoot){
	if (bulletClock.getElapsedTime().asMilliseconds() < 1)
		return;

	bulletClock.restart();
	bullet[0][1] -= 16;	 
	if (bullet[0][1] < 0)
		{
		bullet[0][0] = player[0][0];
		bullet[0][1] = player[0][1] - boxPixelsY;
		BulletShoot = false;
		}
}

//DRAWING BULLET FUNCTION
void drawBullet(sf::RenderWindow& window, float bullet[][3], sf::Sprite& bulletSprite){
	bulletSprite.setPosition(bullet[0][0], bullet[0][1]);
	window.draw(bulletSprite);
	//cout<<"Bullet Time Baby"<<endl<<bullet[0][0]<<" "<<bullet[0][1]<<endl;
}
